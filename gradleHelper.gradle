/**
 * Load properties file into the project
 * @param fileName properties file name
 */
def loadProperties(def fileName) {
    def propertiesFile = file(fileName)
    if (!propertiesFile.exists()) {
        println("Properties file missing: " + fileName)
        return
    }

    Properties properties = new Properties()
    properties.load(propertiesFile.newReader("UTF-8"))
    properties.each { property ->
        // all extra properties must set in: project.ext
        project.ext.set(property.key, property.value)
    }
}

/**
 * Get the value for the secret key
 *
 * @param key the key identifier
 * @param defaultValue default value of such key is missing
 * @return the value behind the key or the defaultValue
 */
def getSecret(def key, def defaultValue = null) {
    return project.hasProperty(key) ? project.property(key) : defaultValue
}

/**
 *
 * build fabric properties file, if missing
 */
def buildFabricPropertiesIfNeeded() {
    def propertiesFile = file("fabric.properties")
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: getSecret("fabricApiSecret"), operation: "=")
            entry(key: "apiKey", value: getSecret("fabricApiKey"), operation: "=")
        }
    }
}

/**
 *
 * @return return CircleCI build branch or "localdev"
 */
def getBranchName() {
    def branch = System.getenv("CIRCLE_BRANCH");
    if (branch != null && branch.length() > 0) {
        branch = branch.trim();
    } else {
        // fallback for local dev
        branch = "localdev";
    }

    return branch;
}

/**
 *
 * @return Generated changelog from the last 10 GitHub commits
 */
def getChangelog() {
    if ("localdev".equalsIgnoreCase(getBranchName())) {
        return "Local development build"
    }

    def logCmd = 'git log --oneline --no-decorate -n 10'
    def logs = logCmd.execute().text.trim()
    def items = []

    if (logs.length() > 0) {
        def lines = logs.split("\n")
        for (int i = 0; i < lines.length; i++) {
            items.add(String.format("%02d %s", i + 1, lines[i]))
        }
    }

    return items.join("\n")
}

// Export methods by turning them into closures
ext {
    buildFabricPropertiesIfNeeded = this.&buildFabricPropertiesIfNeeded
    getSecret = this.&getSecret
    loadProperties = this.&loadProperties
    getChangelog = this.&getChangelog
}