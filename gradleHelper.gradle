/**
 * Load properties file into the project
 * @param fileName properties file name
 */
def loadProperties(def fileName) {
    def propertiesFile = file(fileName)
    if (!propertiesFile.exists()) {
        println("Properties file missing: " + fileName)
        return
    }

    Properties properties = new Properties()
    properties.load(propertiesFile.newReader("UTF-8"))
    properties.each { property ->
        // all extra properties must set in: project.ext
        project.ext.set(property.key, property.value)
    }
}

/**
 * Get the value for the secret key
 *
 * @param key the key identifier
 * @param defaultValue default value of such key is missing
 * @return the value behind the key or the defaultValue
 */
def getSecret(def key, def defaultValue = null) {
    return project.hasProperty(key) ? project.property(key) : defaultValue
}

/**
 *
 * build fabric properties file, if missing
 */
def buildFabricPropertiesIfNeeded() {
    def propertiesFile = file("fabric.properties")
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: getSecret("fabricApiSecret"), operation: "=")
            entry(key: "apiKey", value: getSecret("fabricApiKey"), operation: "=")
        }
    }
}

// Export methods by turning them into closures
ext {
    buildFabricPropertiesIfNeeded = this.&buildFabricPropertiesIfNeeded
    getSecret = this.&getSecret
    loadProperties = this.&loadProperties
}